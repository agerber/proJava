
      ___            ___        /  /\         /  /\         /  /\    
     /  /\          /__/\      /  /::\       /  /::\       /  /::\   
    /  /:/          \__\:\    /  /:/\:\     /  /:/\:\     /  /:/\:\  
   /  /:/           /  /::\  /  /:/  \:\   /  /::\ \:\   /  /:/  \:\ 
  /__/:/  ___    __/  /:/\/ /__/:/ \__\:| /__/:/\:\ \:\ /__/:/ \__\:\
  |  |:| /  /\  /__/\/:/~~  \  \:\ /  /:/ \  \:\ \:\_\/ \  \:\ /  /:/
  |  |:|/  /:/  \  \::/      \  \:\  /:/   \  \:\ \:\    \  \:\  /:/ 
  |__|:|__/:/    \  \:\       \  \:\/:/     \  \:\_\/     \  \:\/:/  
   \__\::::/      \__\/        \__\::/       \  \:\        \  \::/   
       ~~~~                        ~~         \__\/         \__\/    
      ___           ___           ___           ___     
     /  /\         /  /\         /  /\         /  /\    
    /  /::\       /  /::\       /  /::|       /  /::\   
   /  /:/\:\     /  /:/\:\     /  /:|:|      /  /:/\:\  
  /  /:/  \:\   /  /::\ \:\   /  /:/|:|__   /  /::\ \:\ 
 /__/:/_\_ \:\ /__/:/\:\_\:\ /__/:/_|::::\ /__/:/\:\ \:\
 \  \:\__/\_\/ \__\/  \:\/:/ \__\/  /~~/:/ \  \:\ \:\_\/
  \  \:\ \:\        \__\::/        /  /:/   \  \:\ \:\  
   \  \:\/:/        /  /:/        /  /:/     \  \:\_\/  
    \  \::/        /__/:/        /__/:/       \  \:\    
     \__\/         \__\/         \__\/         \__\/    




Create a classic video game using the tools you've learned throughout the quarter.
1/ You MUST extend the Asteroids code-base provided to you.
2/ You can create any video game you want, EXCEPT Asteroids.
3/ You may code your game in either Java or Kotlin; see README.md of proJava for Kotlin instructions.

Any 80's style vector arcade game is ideally suited to this game engine, such as: Galaga, Space Invaders, Missile
Command, Qix, etc. To create your own game, you would effectively ignore/delete the Asteroids model and create
your own model.

The TAs will select the top six games. The six finalists will demonstrate their games and present their code and
architecture, and the class will vote on the best game. The winner will receive a token prize during an
awards-ceremony/reception on the last day.

**************************************************
**************************************************
**************************************************

Some things to keep in mind.

1/ Sprite is essentially a shape circumscribed by a circle, which makes collision detection really easy. The down-side
is that polar coordinates are difficult to work with. However, I created a method that allows you to create shapes using
an ArrayList<Point> where the points are on a cartesian grid with 0,0 at the origin. When you add your points to the
ArrayList, order matters, so that each point is adjascent to its neighbor in the ArrayList. The following ArrayList<Point>
describes the shape of the fictitious Sprite. Just keep in mind that creating
this ArrayList<Point> out-of-order will produce a jaggedy-shaped sprite. The following order is correct (though I could
have traversed the points counter-clockwise with the same good result).


		List<Point> pntAs = new ArrayList<Point>();
		pntAs.add(new Point(0, 5)); //top point
		pntAs.add(new Point(1, 3));  //right top point
		pntAs.add(new Point(1, -2)); //right bottom point
		pntAs.add(new Point(-1, -2)); // left bottom point
		pntAs.add(new Point(-1, 3)); //left top point
		assignPolorPoints(pntAs);



Some addition info:
the M key is for muting music. 

